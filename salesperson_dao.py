# salesperson_dao.py
# Omar Adnan
# 18-05-2020

# Import packages
# From file xxx.py import class Xxxx
# Note: Filenames with hyphens cannot be imported, use underscores
from schema import SalesPerson

class SalesPersonDAO():

    def create(self, session, data):

        # Print info for debugging
        print("\nCreating an salesperson ...") #\n means print("\n") a blank line
        print(data)

        # Instantiate an object of the mapped SalesPerson class - defined in schema.py
        # SKip the salesperson_id when inserting as it will be generated by the database
        salesperson = SalesPerson(firstname = data['firstname'], 
                    lastname = data['lastname'], 
                    title = data['title'], 
                    email = data['email'],
                    work_phone = data['work_phone']
                    )

        # Get the session to add the salesperson object
        session.add(salesperson)
        session.commit() # Must commit to save the record permanently

        # Create a blank dictionary to return the result
        result = {}  
        result['message'] = 'SalesPerson added successfully!'
        inserted_salesperson_id = salesperson.salesperson_id
        result['salesperson_id'] = inserted_salesperson_id

        return result # return the result as a dictionary   

    def find_by_id(self, session, salesperson_id):

        # Print info for debugging
        print("\nFinding an salesperson ...")
        print(salesperson_id)

        # Get the session to query the SalesPerson class
        # And get by the primary key i.e. salesperson_id
        sap = session.query(SalesPerson).get(salesperson_id) 
        
        # Create a blank dictionary to return the result
        result = {}

        # sap is a single Alchemy object - no need for a loop to process
        if not sap:
            # If no salesperson found i.e. sap is none
            result['message'] = "SalesPerson NOT found"
        else:
            # Else grab the values in the returned SQLalchemy object
            # And build another python dictionary
            d = {} # Create an sapty dict and add items to it
            d['salesperson_id'] = sap.salesperson_id # include the salesperson_id
            d['firstname'] = sap.firstname
            d['lastname'] = sap.lastname
            d['title'] = sap.title
            d['email'] = sap.email
            d['work_phone'] = sap.work_phone

            # Store the salesperson dict in the result dict under key "salesperson"
            result['salesperson'] = d
            #session.commit() # not needed for find as not saving changes            
        
        # Note that the return is not part of the if/else block
        # Ensure it's indented to the left
        return result # return the result as a dictionary

    def find_by_lastname(self, session, lastname): 

        # Print info for debugging
        print("\nFinding salesperson(s) by lastname ...")
        print(lastname)

        # Create a blank dictionary to return the result
        result = {}

        # Line is too long for display > 80 chars 
        # Use line continuation character at sensible places
        # Get the session to query the SalesPerson class and filter and order all
        rows = session.query(SalesPerson) \
               .filter(SalesPerson.lastname.like(lastname)) \
               .order_by(SalesPerson.salesperson_id).all()   

        if not rows:
            result['message'] = "No salespersons found!"
        else:
            # Convert list of Alchemy salesperson objects to a list of dictionaries
            # This query could return more than one salespersons - so create a list
            list_sap = [] # Create an sapty list to append salesperson dicts
            for x in rows: # rows is a list of Alchemy objects - process one by one
                d = {} # Create an sapty dict and add items to it
                d['salesperson_id'] = x.salesperson_id
                d['firstname'] = x.firstname
                d['lastname'] = x.lastname
                d['title'] = x.title
                d['email'] = x.email
                d['work_phone'] = x.work_phone
                list_sap.append(d) # Append the salesperson dict to the salesperson list
                pass     

            # Store the salesperson list in the result dict under key "salespersons"              
            result['salespersons'] = list_sap
           
        return result  # return the result as a dictionary   

    def find_all(self, session):

        # Print info for debugging
        print("\nFinding all salespersons ...")

        # Create a blank dictionary to return the result
        result = {}

        # Get the session to query the SalesPerson class and get all (may wish to sort)
        rows = session.query(SalesPerson).all()

        if not rows:
            result['message'] = "No salespersons found!"
        else:
            # Convert list of Alchemy objects to a list of dictionaries
            list_sap = [] # Create an sapty list to append salesperson dicts
            for x in rows: # rows is a list of Alchemy objects - process one by one
                d = {} # Create an sapty dict and add items to it
                d['salesperson_id'] = x.salesperson_id
                d['firstname'] = x.firstname
                d['lastname'] = x.lastname
                d['title'] = x.title
                d['email'] = x.email
                d['work_phone'] = x.work_phone
                list_sap.append(d) # Append the salesperson dict to the salesperson list
                pass  

            # Store the salesperson list in the result dict under key "salespersons"                 
            result['salespersons'] = list_sap
            
        return result # return the result as a dictionary

    def find_ids(self, session):
        """
        This is a special method similar to find_all but returns salesperson_ids only, 
        not the full details
        """

        # Print info for debugging
        print("\nFinding all salesperson ids ...")

        # Create a blank dictionary to return the result
        result = {}
 
        # Get the list of salespersons from the database
        rows = session.query(SalesPerson).all()

        if not rows:
            result['message'] = "No salespersons found!"
        else:
            # Convert list of Alchemy objects to a list of dictionaries
            list_ids = []
            for x in rows:
                list_ids.append(x.salesperson_id)
                pass               

            # Store the list of ids in the result dict under key "salesperson_ids"
            result['salesperson_ids'] = list_ids
        
        return result # return the result as a dictionary

    def update(self, session, salesperson_id, data):

        # Print info for debugging
        print("\nUpdating salesperson ...")
        print(salesperson_id)
        print(data)

        # Create a blank dictionary to return the result
        result = {}

        # Find the salesperson record
        # What happens if the salesperson is not found?
        sap = session.query(SalesPerson).get(salesperson_id)

        # Need to find out which field has changed!
        # Just update all fields
        #sap.salesperson_id = data['salesperson_id'] # Not the primary key!
        sap.firstname = data['firstname']
        sap.lastname = data['lastname']
        sap.title = data['title']
        sap.email = data['email']
        sap.work_phone = data['work_phone']

        session.commit() # Don't forget to commit 

        # Store an appropriate message in the result dict under key "message"
        result['message'] = "SalesPerson updated!"     

        return result # return the result as a dictionary

    def delete(self, session, salesperson_id):

        # Print info for debugging
        print("\nDeleting salesperson ...")
        print(salesperson_id)
 
        # Create a blank dictionary to return the result
        result = {}

        # Find the record and get the session to delete it   
        # What happens if the salesperson is not found?      
        sap = session.query(SalesPerson).get(salesperson_id)
        session.delete(sap)          
        session.commit()   # Don't forget to commit    

        # Store an appropriate message in the result dict under key "message"
        result['message'] = "SalesPerson deleted"    

        return result # return the result as a dictionary    
